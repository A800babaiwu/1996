# This is a basic workflow to help you get started with Actions

name: Build the Twine game

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    tags:
      - 'v*.*.*'

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12

    - name: Test for presence of Windows or macOS codesigning secrets
      id: vars
      shell: bash
      run: |
          unset HAS_APPLE_CREDS
          if [-n $CERTIFICATE_OSX_APPLICATION] or [-n $CERTIFICATE_PASSWORD]; then HAS_APPLE_CREDS='true' ; fi
          echo ::set-output name=HAS_APPLE_CREDS::${HAS_APPLE_CREDS}
      env:
        CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

    - name: Check out Electron app template
      uses: actions/checkout@v2
      with:
        repository: lazerwalker/electron-wrapper-template
        path: app

    - name: Set up Electron app environment
      working-directory: ./app
      run: npm install

    - name: move webapp into Electron folder
      run: |
        mv ./src/* ./app/src
        mv ./icon.png ./app

    - name: Generate icons
      working-directory: ./app
      run: npm run build-icons

    - name: Add MacOS certs
      if: matrix.os == 'macos-latest' && steps.vars.outputs.HAS_APPLE_CREDS
      run: |
        KEY_CHAIN=build.keychain
        CERTIFICATE_P12=certificate.p12
        echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
        security create-keychain -p actions $KEY_CHAIN
        security default-keychain -s $KEY_CHAIN
        security unlock-keychain -p actions $KEY_CHAIN
        security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
        security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
        rm -fr *.p12chmod +x add-osx-cert.sh && ./add-osx-cert.sh
      env:
        CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

    - name: Add Windows certificate
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      id: write_file
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'win-certificate.pfx'
        encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}

    - name: Build the app
      working-directory: ./app
      env:
        APP_NAME: My Twine game
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        WINDOWS_PFX_FILE: ${{ steps.write_file.outputs.filePath }}
        WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
      run: npm run make

    - name: Release on GitHub
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          app/out/**/*.deb
          app/out/**/*.dmg
          app/out/**/*Setup.exe
          app/out/**/*.rpm
          app/out/**/*.zip